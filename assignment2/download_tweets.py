"""This code was written by
        Eva Batelaan <batelaan@stanford.edu>
        Thomas Brink <tbrink@stanford.edu>
        Michelle Lahrkamp <ml17270@stanford.edu>
    Assignment 2 Group 3

    Collects tweets from Twitter streaming API via tweepy and prints them

    Use:
    python3 download_tweets.py > congress_df_YYYY-MM-DD_tweets.txt

    The following flags are required:
        --user_file: csv generated by parse_congress_data.py
            ex: congress_df_YYYY-MM-DD.csv
        --keyfile: twitter API credentials file
            ex: creds.txt

    Note:
    YYYY-MM-DD should match the YYYY-MM-DD in the name of the user_file csv
"""
import argparse
import datetime
import sys
import pandas as pd
import json
from tweepy import Stream, Client, StreamingClient, Paginator

MAX_TWEETS = 50


def eprint(*args, **kwargs):
    """Print to stderr"""
    print(*args, file=sys.stderr, **kwargs)


class CustomStreamingClient(StreamingClient):
    """Extracted from tweet_stream.py provided in assignment 1"""
    total_tweets = 0
    sunset_time = datetime.datetime.now()

    def __init__(self, write=print, **kwds):
        super(CustomStreamingClient, self).__init__(**kwds)
        self.write = write

    def on_tweet(self, tweet):
        self.write(tweet.data)

    def on_data(self, raw_data):
        self.write(raw_data)
        self.total_tweets += 1

    def on_error(self, status_code):
        eprint(status_code)


if __name__ == "__main__":
    # Set up the argument parser
    parser = argparse.ArgumentParser(
        description="Fetch data with Twitter Streaming API"
    )
    parser.add_argument(
        "--user_file", help="file with legislators' twitter information", required=True)
    parser.add_argument(
        "--keyfile", help="file with user credentials", required=True)
    flags = parser.parse_args()

    # Read twitter app credentials and set up authentication
    creds = {}
    for line in open(flags.keyfile, "r"):
        row = line.strip()
        if row:
            key, value = row.split()
            creds[key] = value

    twitterstream = Stream(
        creds["api_key"], creds["api_secret"], creds["token"], creds["token_secret"]
    )

    # Track time and start streaming
    starttime = datetime.datetime.now()
    twitter_streaming_client = CustomStreamingClient(
        write=print, bearer_token=creds["bearer_token"])
    twitter_client = Client(bearer_token=creds["bearer_token"])

    # Clear out old rules
    old_rules = twitter_streaming_client.get_rules()
    if old_rules.data is not None:
        rule_ids = [rule.id for rule in old_rules.data]
        twitter_streaming_client.delete_rules(rule_ids)

    # Start streaming
    eprint("Started running at", starttime)
    try:
        user_df = pd.read_csv(flags.user_file)
        for user_id in user_df['twitter_id']:
            # Run query to get tweets
            eprint("Getting last 7 days of tweets for user: " + str(user_id))
            paginator = Paginator(twitter_client.get_users_tweets,
                                  id=user_id,
                                  exclude=['retweets', 'replies'],
                                  expansions='author_id',
                                  tweet_fields=['conversation_id',
                                                'created_at', 'public_metrics'],
                                  user_fields='public_metrics',
                                  start_time=(datetime.datetime.now() -
                                              datetime.timedelta(days=7)),
                                  max_results=100
                                  )
            # Extract user information and print each flattened tweet as a json
            users = {}
            for response in paginator:
                for userObj in response.includes['users']:
                    user = userObj.data
                    users[user['id']] = user
            for tweet in paginator.flatten(limit=2000):
                full_object = {}
                full_object['user_info'] = users[str(tweet['author_id'])]
                full_object['tweet_info'] = tweet.data
                print(json.dumps(full_object))
    except KeyboardInterrupt:
        eprint()
    except AttributeError:
        # Catch rare occasion when Streaming API returns None
        pass

    eprint("total run time", datetime.datetime.now() - starttime)
